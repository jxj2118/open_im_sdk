// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/open_im_sdk.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OpenImSdkBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpenImSdkBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpenImSdkBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  /// ANSI-C
  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Functions internal to the implementation.
  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// perror(3) external variables
  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  /// Stdio function-access interface.
  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  void Call_CB_S(
    CB_S func,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _Call_CB_S(
      func,
      data,
    );
  }

  late final _Call_CB_SPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CB_S, ffi.Pointer<ffi.Char>)>>(
      'Call_CB_S');
  late final _Call_CB_S =
      _Call_CB_SPtr.asFunction<void Function(CB_S, ffi.Pointer<ffi.Char>)>();

  void Call_CB_I_S(
    CB_I_S func,
    int event,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _Call_CB_I_S(
      func,
      event,
      data,
    );
  }

  late final _Call_CB_I_SPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_I_S, ffi.Int, ffi.Pointer<ffi.Char>)>>('Call_CB_I_S');
  late final _Call_CB_I_S = _Call_CB_I_SPtr.asFunction<
      void Function(CB_I_S, int, ffi.Pointer<ffi.Char>)>();

  void Call_CB_S_I_S_S(
    CB_S_I_S_S func,
    ffi.Pointer<ffi.Char> arg1,
    int errCode,
    ffi.Pointer<ffi.Char> errMsg,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _Call_CB_S_I_S_S(
      func,
      arg1,
      errCode,
      errMsg,
      data,
    );
  }

  late final _Call_CB_S_I_S_SPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Call_CB_S_I_S_S');
  late final _Call_CB_S_I_S_S = _Call_CB_S_I_S_SPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void Call_CB_S_I_S_S_I(
    CB_S_I_S_S_I func,
    ffi.Pointer<ffi.Char> arg1,
    int errCode,
    ffi.Pointer<ffi.Char> errMsg,
    ffi.Pointer<ffi.Char> data,
    int progress,
  ) {
    return _Call_CB_S_I_S_S_I(
      func,
      arg1,
      errCode,
      errMsg,
      data,
      progress,
    );
  }

  late final _Call_CB_S_I_S_S_IPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S_I,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Call_CB_S_I_S_S_I');
  late final _Call_CB_S_I_S_S_I = _Call_CB_S_I_S_S_IPtr.asFunction<
      void Function(CB_S_I_S_S_I, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<CB_S> _DebugPrint = _lookup<CB_S>('DebugPrint');

  CB_S get DebugPrint => _DebugPrint.value;

  set DebugPrint(CB_S value) => _DebugPrint.value = value;

  void set_print(
    CB_S print,
  ) {
    return _set_print(
      print,
    );
  }

  late final _set_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_S)>>('set_print');
  late final _set_print = _set_printPtr.asFunction<void Function(CB_S)>();

  void set_group_listener(
    CB_I_S cCallback,
  ) {
    return _set_group_listener(
      cCallback,
    );
  }

  late final _set_group_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_group_listener');
  late final _set_group_listener =
      _set_group_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_conversation_listener(
    CB_I_S cCallback,
  ) {
    return _set_conversation_listener(
      cCallback,
    );
  }

  late final _set_conversation_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_conversation_listener');
  late final _set_conversation_listener =
      _set_conversation_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_advanced_msg_listener(
    CB_I_S cCallback,
  ) {
    return _set_advanced_msg_listener(
      cCallback,
    );
  }

  late final _set_advanced_msg_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_advanced_msg_listener');
  late final _set_advanced_msg_listener =
      _set_advanced_msg_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_batch_msg_listener(
    CB_I_S cCallback,
  ) {
    return _set_batch_msg_listener(
      cCallback,
    );
  }

  late final _set_batch_msg_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_batch_msg_listener');
  late final _set_batch_msg_listener =
      _set_batch_msg_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_user_listener(
    CB_I_S cCallback,
  ) {
    return _set_user_listener(
      cCallback,
    );
  }

  late final _set_user_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_user_listener');
  late final _set_user_listener =
      _set_user_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_friend_listener(
    CB_I_S cCallback,
  ) {
    return _set_friend_listener(
      cCallback,
    );
  }

  late final _set_friend_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_friend_listener');
  late final _set_friend_listener =
      _set_friend_listenerPtr.asFunction<void Function(CB_I_S)>();

  void set_custom_business_listener(
    CB_I_S cCallback,
  ) {
    return _set_custom_business_listener(
      cCallback,
    );
  }

  late final _set_custom_business_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CB_I_S)>>(
          'set_custom_business_listener');
  late final _set_custom_business_listener =
      _set_custom_business_listenerPtr.asFunction<void Function(CB_I_S)>();

  int init_sdk(
    CB_I_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> config,
  ) {
    return _init_sdk(
      cCallback,
      operationID,
      config,
    );
  }

  late final _init_sdkPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(CB_I_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('init_sdk');
  late final _init_sdk = _init_sdkPtr.asFunction<
      int Function(CB_I_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void un_init_sdk(
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _un_init_sdk(
      operationID,
    );
  }

  late final _un_init_sdkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'un_init_sdk');
  late final _un_init_sdk =
      _un_init_sdkPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void hide_login(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> uid,
    ffi.Pointer<ffi.Char> token,
  ) {
    return _hide_login(
      cCallback,
      operationID,
      uid,
      token,
    );
  }

  late final _hide_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('hide_login');
  late final _hide_login = _hide_loginPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void hide_logout(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _hide_logout(
      cCallback,
      operationID,
    );
  }

  late final _hide_logoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('hide_logout');
  late final _hide_logout = _hide_logoutPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void im_login(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> uid,
    ffi.Pointer<ffi.Char> token,
  ) {
    return _im_login(
      cCallback,
      operationID,
      uid,
      token,
    );
  }

  late final _im_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('im_login');
  late final _im_login = _im_loginPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void im_logout(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _im_logout(
      cCallback,
      operationID,
    );
  }

  late final _im_logoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('im_logout');
  late final _im_logout = _im_logoutPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void set_app_background_status(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int isBackground,
  ) {
    return _set_app_background_status(
      cCallback,
      operationID,
      isBackground,
    );
  }

  late final _set_app_background_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('set_app_background_status');
  late final _set_app_background_status = _set_app_background_statusPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int)>();

  void network_status_changed(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _network_status_changed(
      cCallback,
      operationID,
    );
  }

  late final _network_status_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('network_status_changed');
  late final _network_status_changed = _network_status_changedPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  int get_login_status(
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_login_status(
      operationID,
    );
  }

  late final _get_login_statusPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Pointer<ffi.Char>)>>(
          'get_login_status');
  late final _get_login_status =
      _get_login_statusPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_login_user() {
    return _get_login_user();
  }

  late final _get_login_userPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'get_login_user');
  late final _get_login_user =
      _get_login_userPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> create_text_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _create_text_message(
      operationID,
      text,
    );
  }

  late final _create_text_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_text_message');
  late final _create_text_message = _create_text_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_advanced_text_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> messageEntityList,
  ) {
    return _create_advanced_text_message(
      operationID,
      text,
      messageEntityList,
    );
  }

  late final _create_advanced_text_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_advanced_text_message');
  late final _create_advanced_text_message =
      _create_advanced_text_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_text_at_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> atUserList,
    ffi.Pointer<ffi.Char> atUsersInfo,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _create_text_at_message(
      operationID,
      text,
      atUserList,
      atUsersInfo,
      message,
    );
  }

  late final _create_text_at_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_text_at_message');
  late final _create_text_at_message = _create_text_at_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_location_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> description,
    double longitude,
    double latitude,
  ) {
    return _create_location_message(
      operationID,
      description,
      longitude,
      latitude,
    );
  }

  late final _create_location_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double)>>('create_location_message');
  late final _create_location_message = _create_location_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double, double)>();

  ffi.Pointer<ffi.Char> create_custom_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> extension1,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _create_custom_message(
      operationID,
      data,
      extension1,
      description,
    );
  }

  late final _create_custom_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_custom_message');
  late final _create_custom_message = _create_custom_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_quote_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _create_quote_message(
      operationID,
      text,
      message,
    );
  }

  late final _create_quote_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_quote_message');
  late final _create_quote_message = _create_quote_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_advanced_quote_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> messageEntityList,
  ) {
    return _create_advanced_quote_message(
      operationID,
      text,
      message,
      messageEntityList,
    );
  }

  late final _create_advanced_quote_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_advanced_quote_message');
  late final _create_advanced_quote_message =
      _create_advanced_quote_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_card_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cardInfo,
  ) {
    return _create_card_message(
      operationID,
      cardInfo,
    );
  }

  late final _create_card_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_card_message');
  late final _create_card_message = _create_card_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_video_message_from_full_path(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> videoFullPath,
    ffi.Pointer<ffi.Char> videoType,
    int duration,
    ffi.Pointer<ffi.Char> snapshotFullPath,
  ) {
    return _create_video_message_from_full_path(
      operationID,
      videoFullPath,
      videoType,
      duration,
      snapshotFullPath,
    );
  }

  late final _create_video_message_from_full_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('create_video_message_from_full_path');
  late final _create_video_message_from_full_path =
      _create_video_message_from_full_pathPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_image_message_from_full_path(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> imageFullPath,
  ) {
    return _create_image_message_from_full_path(
      operationID,
      imageFullPath,
    );
  }

  late final _create_image_message_from_full_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_image_message_from_full_path');
  late final _create_image_message_from_full_path =
      _create_image_message_from_full_pathPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_sound_message_from_full_path(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> soundPath,
    int duration,
  ) {
    return _create_sound_message_from_full_path(
      operationID,
      soundPath,
      duration,
    );
  }

  late final _create_sound_message_from_full_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.LongLong)>>('create_sound_message_from_full_path');
  late final _create_sound_message_from_full_path =
      _create_sound_message_from_full_pathPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> create_file_message_from_full_path(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> fileFullPath,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _create_file_message_from_full_path(
      operationID,
      fileFullPath,
      fileName,
    );
  }

  late final _create_file_message_from_full_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_file_message_from_full_path');
  late final _create_file_message_from_full_path =
      _create_file_message_from_full_pathPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_image_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> imagePath,
  ) {
    return _create_image_message(
      operationID,
      imagePath,
    );
  }

  late final _create_image_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_image_message');
  late final _create_image_message = _create_image_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_image_message_by_url(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> sourcePath,
    ffi.Pointer<ffi.Char> sourcePicture,
    ffi.Pointer<ffi.Char> bigPicture,
    ffi.Pointer<ffi.Char> snapshotPicture,
  ) {
    return _create_image_message_by_url(
      operationID,
      sourcePath,
      sourcePicture,
      bigPicture,
      snapshotPicture,
    );
  }

  late final _create_image_message_by_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_image_message_by_url');
  late final _create_image_message_by_url =
      _create_image_message_by_urlPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_sound_message_by_url(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> soundBaseInfo,
  ) {
    return _create_sound_message_by_url(
      operationID,
      soundBaseInfo,
    );
  }

  late final _create_sound_message_by_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_sound_message_by_url');
  late final _create_sound_message_by_url =
      _create_sound_message_by_urlPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_sound_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> soundPath,
    int duration,
  ) {
    return _create_sound_message(
      operationID,
      soundPath,
      duration,
    );
  }

  late final _create_sound_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.LongLong)>>('create_sound_message');
  late final _create_sound_message = _create_sound_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> create_video_message_by_url(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> videoBaseInfo,
  ) {
    return _create_video_message_by_url(
      operationID,
      videoBaseInfo,
    );
  }

  late final _create_video_message_by_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_video_message_by_url');
  late final _create_video_message_by_url =
      _create_video_message_by_urlPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_video_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> videoPath,
    ffi.Pointer<ffi.Char> videoType,
    int duration,
    ffi.Pointer<ffi.Char> snapshotPath,
  ) {
    return _create_video_message(
      operationID,
      videoPath,
      videoType,
      duration,
      snapshotPath,
    );
  }

  late final _create_video_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('create_video_message');
  late final _create_video_message = _create_video_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_file_message_by_url(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> fileBaseInfo,
  ) {
    return _create_file_message_by_url(
      operationID,
      fileBaseInfo,
    );
  }

  late final _create_file_message_by_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_file_message_by_url');
  late final _create_file_message_by_url =
      _create_file_message_by_urlPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_file_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> filePath,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _create_file_message(
      operationID,
      filePath,
      fileName,
    );
  }

  late final _create_file_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_file_message');
  late final _create_file_message = _create_file_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_merger_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> messageList,
    ffi.Pointer<ffi.Char> title,
    ffi.Pointer<ffi.Char> summaryList,
  ) {
    return _create_merger_message(
      operationID,
      messageList,
      title,
      summaryList,
    );
  }

  late final _create_merger_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_merger_message');
  late final _create_merger_message = _create_merger_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_face_message(
    ffi.Pointer<ffi.Char> operationID,
    int index,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _create_face_message(
      operationID,
      index,
      data,
    );
  }

  late final _create_face_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('create_face_message');
  late final _create_face_message = _create_face_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> create_forward_message(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> m,
  ) {
    return _create_forward_message(
      operationID,
      m,
    );
  }

  late final _create_forward_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_forward_message');
  late final _create_forward_message = _create_forward_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_all_conversation_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_all_conversation_list(
      cCallback,
      operationID,
    );
  }

  late final _get_all_conversation_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('get_all_conversation_list');
  late final _get_all_conversation_list = _get_all_conversation_listPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void get_conversation_list_split(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int offset,
    int count,
  ) {
    return _get_conversation_list_split(
      cCallback,
      operationID,
      offset,
      count,
    );
  }

  late final _get_conversation_list_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('get_conversation_list_split');
  late final _get_conversation_list_split = _get_conversation_list_splitPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int, int)>();

  void get_one_conversation(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int sessionType,
    ffi.Pointer<ffi.Char> sourceID,
  ) {
    return _get_one_conversation(
      cCallback,
      operationID,
      sessionType,
      sourceID,
    );
  }

  late final _get_one_conversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('get_one_conversation');
  late final _get_one_conversation = _get_one_conversationPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void get_multiple_conversation(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationIDList,
  ) {
    return _get_multiple_conversation(
      cCallback,
      operationID,
      conversationIDList,
    );
  }

  late final _get_multiple_conversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_multiple_conversation');
  late final _get_multiple_conversation =
      _get_multiple_conversationPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void set_conversation(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> req,
  ) {
    return _set_conversation(
      cCallback,
      operationID,
      conversationID,
      req,
    );
  }

  late final _set_conversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_conversation');
  late final _set_conversation = _set_conversationPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void hide_conversation(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
  ) {
    return _hide_conversation(
      cCallback,
      operationID,
      conversationID,
    );
  }

  late final _hide_conversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('hide_conversation');
  late final _hide_conversation = _hide_conversationPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void set_conversation_draft(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> draftText,
  ) {
    return _set_conversation_draft(
      cCallback,
      operationID,
      conversationID,
      draftText,
    );
  }

  late final _set_conversation_draftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_conversation_draft');
  late final _set_conversation_draft = _set_conversation_draftPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void get_total_unread_msg_count(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_total_unread_msg_count(
      cCallback,
      operationID,
    );
  }

  late final _get_total_unread_msg_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S,
              ffi.Pointer<ffi.Char>)>>('get_total_unread_msg_count');
  late final _get_total_unread_msg_count = _get_total_unread_msg_countPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_at_all_tag(
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_at_all_tag(
      operationID,
    );
  }

  late final _get_at_all_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('get_at_all_tag');
  late final _get_at_all_tag = _get_at_all_tagPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_conversation_id_by_session_type(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> sourceID,
    int sessionType,
  ) {
    return _get_conversation_id_by_session_type(
      operationID,
      sourceID,
      sessionType,
    );
  }

  late final _get_conversation_id_by_session_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('get_conversation_id_by_session_type');
  late final _get_conversation_id_by_session_type =
      _get_conversation_id_by_session_typePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void send_message(
    CB_S_I_S_S_I cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> recvID,
    ffi.Pointer<ffi.Char> groupID,
    ffi.Pointer<ffi.Char> offlinePushInfo,
    int isOnlineOnly,
  ) {
    return _send_message(
      cCallback,
      operationID,
      message,
      recvID,
      groupID,
      offlinePushInfo,
      isOnlineOnly,
    );
  }

  late final _send_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S_I,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('send_message');
  late final _send_message = _send_messagePtr.asFunction<
      void Function(
          CB_S_I_S_S_I,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  void send_message_not_oss(
    CB_S_I_S_S_I cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> recvID,
    ffi.Pointer<ffi.Char> groupID,
    ffi.Pointer<ffi.Char> offlinePushInfo,
    int isOnlineOnly,
  ) {
    return _send_message_not_oss(
      cCallback,
      operationID,
      message,
      recvID,
      groupID,
      offlinePushInfo,
      isOnlineOnly,
    );
  }

  late final _send_message_not_ossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S_I,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('send_message_not_oss');
  late final _send_message_not_oss = _send_message_not_ossPtr.asFunction<
      void Function(
          CB_S_I_S_S_I,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  void find_message_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> findMessageOptions,
  ) {
    return _find_message_list(
      cCallback,
      operationID,
      findMessageOptions,
    );
  }

  late final _find_message_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('find_message_list');
  late final _find_message_list = _find_message_listPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_advanced_history_message_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> getMessageOptions,
  ) {
    return _get_advanced_history_message_list(
      cCallback,
      operationID,
      getMessageOptions,
    );
  }

  late final _get_advanced_history_message_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_advanced_history_message_list');
  late final _get_advanced_history_message_list =
      _get_advanced_history_message_listPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_advanced_history_message_list_reverse(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> getMessageOptions,
  ) {
    return _get_advanced_history_message_list_reverse(
      cCallback,
      operationID,
      getMessageOptions,
    );
  }

  late final _get_advanced_history_message_list_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'get_advanced_history_message_list_reverse');
  late final _get_advanced_history_message_list_reverse =
      _get_advanced_history_message_list_reversePtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void revoke_message(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> clientMsgID,
  ) {
    return _revoke_message(
      cCallback,
      operationID,
      conversationID,
      clientMsgID,
    );
  }

  late final _revoke_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('revoke_message');
  late final _revoke_message = _revoke_messagePtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void typing_status_update(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> recvID,
    ffi.Pointer<ffi.Char> msgTip,
  ) {
    return _typing_status_update(
      cCallback,
      operationID,
      recvID,
      msgTip,
    );
  }

  late final _typing_status_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('typing_status_update');
  late final _typing_status_update = _typing_status_updatePtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void mark_conversation_message_as_read(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
  ) {
    return _mark_conversation_message_as_read(
      cCallback,
      operationID,
      conversationID,
    );
  }

  late final _mark_conversation_message_as_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('mark_conversation_message_as_read');
  late final _mark_conversation_message_as_read =
      _mark_conversation_message_as_readPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void delete_message_from_local_storage(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> clientMsgID,
  ) {
    return _delete_message_from_local_storage(
      cCallback,
      operationID,
      conversationID,
      clientMsgID,
    );
  }

  late final _delete_message_from_local_storagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('delete_message_from_local_storage');
  late final _delete_message_from_local_storage =
      _delete_message_from_local_storagePtr.asFunction<
          void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void delete_message(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> clientMsgID,
  ) {
    return _delete_message(
      cCallback,
      operationID,
      conversationID,
      clientMsgID,
    );
  }

  late final _delete_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('delete_message');
  late final _delete_message = _delete_messagePtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void hide_all_conversations(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _hide_all_conversations(
      cCallback,
      operationID,
    );
  }

  late final _hide_all_conversationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('hide_all_conversations');
  late final _hide_all_conversations = _hide_all_conversationsPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void delete_all_msg_from_local_and_svr(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _delete_all_msg_from_local_and_svr(
      cCallback,
      operationID,
    );
  }

  late final _delete_all_msg_from_local_and_svrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S,
              ffi.Pointer<ffi.Char>)>>('delete_all_msg_from_local_and_svr');
  late final _delete_all_msg_from_local_and_svr =
      _delete_all_msg_from_local_and_svrPtr
          .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void delete_all_msg_from_local(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _delete_all_msg_from_local(
      cCallback,
      operationID,
    );
  }

  late final _delete_all_msg_from_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('delete_all_msg_from_local');
  late final _delete_all_msg_from_local = _delete_all_msg_from_localPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void clear_conversation_and_delete_all_msg(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
  ) {
    return _clear_conversation_and_delete_all_msg(
      cCallback,
      operationID,
      conversationID,
    );
  }

  late final _clear_conversation_and_delete_all_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('clear_conversation_and_delete_all_msg');
  late final _clear_conversation_and_delete_all_msg =
      _clear_conversation_and_delete_all_msgPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void delete_conversation_and_delete_all_msg(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
  ) {
    return _delete_conversation_and_delete_all_msg(
      cCallback,
      operationID,
      conversationID,
    );
  }

  late final _delete_conversation_and_delete_all_msgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'delete_conversation_and_delete_all_msg');
  late final _delete_conversation_and_delete_all_msg =
      _delete_conversation_and_delete_all_msgPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void insert_single_message_to_local_storage(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> recvID,
    ffi.Pointer<ffi.Char> sendID,
  ) {
    return _insert_single_message_to_local_storage(
      cCallback,
      operationID,
      message,
      recvID,
      sendID,
    );
  }

  late final _insert_single_message_to_local_storagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CB_S_I_S_S,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'insert_single_message_to_local_storage');
  late final _insert_single_message_to_local_storage =
      _insert_single_message_to_local_storagePtr.asFunction<
          void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void insert_group_message_to_local_storage(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> groupID,
    ffi.Pointer<ffi.Char> sendID,
  ) {
    return _insert_group_message_to_local_storage(
      cCallback,
      operationID,
      message,
      groupID,
      sendID,
    );
  }

  late final _insert_group_message_to_local_storagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('insert_group_message_to_local_storage');
  late final _insert_group_message_to_local_storage =
      _insert_group_message_to_local_storagePtr.asFunction<
          void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void search_local_messages(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> searchParam,
  ) {
    return _search_local_messages(
      cCallback,
      operationID,
      searchParam,
    );
  }

  late final _search_local_messagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('search_local_messages');
  late final _search_local_messages = _search_local_messagesPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void set_message_local_ex(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> clientMsgID,
    ffi.Pointer<ffi.Char> localEx,
  ) {
    return _set_message_local_ex(
      cCallback,
      operationID,
      conversationID,
      clientMsgID,
      localEx,
    );
  }

  late final _set_message_local_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_message_local_ex');
  late final _set_message_local_ex = _set_message_local_exPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void change_input_states(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    int inputStatus,
  ) {
    return _change_input_states(
      cCallback,
      operationID,
      conversationID,
      inputStatus,
    );
  }

  late final _change_input_statesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('change_input_states');
  late final _change_input_states = _change_input_statesPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void get_input_states(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> conversationID,
    ffi.Pointer<ffi.Char> userID,
  ) {
    return _get_input_states(
      cCallback,
      operationID,
      conversationID,
      userID,
    );
  }

  late final _get_input_statesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_input_states');
  late final _get_input_states = _get_input_statesPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void get_users_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDs,
  ) {
    return _get_users_info(
      cCallback,
      operationID,
      userIDs,
    );
  }

  late final _get_users_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_users_info');
  late final _get_users_info = _get_users_infoPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void set_self_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userInfo,
  ) {
    return _set_self_info(
      cCallback,
      operationID,
      userInfo,
    );
  }

  late final _set_self_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_self_info');
  late final _set_self_info = _set_self_infoPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_self_user_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_self_user_info(
      cCallback,
      operationID,
    );
  }

  late final _get_self_user_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('get_self_user_info');
  late final _get_self_user_info = _get_self_user_infoPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void upload_file(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> req,
    CB_I_S uploadCallback,
  ) {
    return _upload_file(
      cCallback,
      operationID,
      req,
      uploadCallback,
    );
  }

  late final _upload_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, CB_I_S)>>('upload_file');
  late final _upload_file = _upload_filePtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, CB_I_S)>();

  /// =====================================================relation===============================================
  void get_specified_friends_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDList,
    int filterBlack,
  ) {
    return _get_specified_friends_info(
      cCallback,
      operationID,
      userIDList,
      filterBlack,
    );
  }

  late final _get_specified_friends_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('get_specified_friends_info');
  late final _get_specified_friends_info =
      _get_specified_friends_infoPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void get_friend_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int filterBlack,
  ) {
    return _get_friend_list(
      cCallback,
      operationID,
      filterBlack,
    );
  }

  late final _get_friend_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int)>>('get_friend_list');
  late final _get_friend_list = _get_friend_listPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int)>();

  void get_friend_list_page(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int offset,
    int count,
    int filterBlack,
  ) {
    return _get_friend_list_page(
      cCallback,
      operationID,
      offset,
      count,
      filterBlack,
    );
  }

  late final _get_friend_list_pagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('get_friend_list_page');
  late final _get_friend_list_page = _get_friend_list_pagePtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int, int, int)>();

  void search_friends(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> searchParam,
  ) {
    return _search_friends(
      cCallback,
      operationID,
      searchParam,
    );
  }

  late final _search_friendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('search_friends');
  late final _search_friends = _search_friendsPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void check_friend(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDList,
  ) {
    return _check_friend(
      cCallback,
      operationID,
      userIDList,
    );
  }

  late final _check_friendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('check_friend');
  late final _check_friend = _check_friendPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void add_friend(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDReqMsg,
  ) {
    return _add_friend(
      cCallback,
      operationID,
      userIDReqMsg,
    );
  }

  late final _add_friendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('add_friend');
  late final _add_friend = _add_friendPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void update_friends(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> req,
  ) {
    return _update_friends(
      cCallback,
      operationID,
      req,
    );
  }

  late final _update_friendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('update_friends');
  late final _update_friends = _update_friendsPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void delete_friend(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> friendUserID,
  ) {
    return _delete_friend(
      cCallback,
      operationID,
      friendUserID,
    );
  }

  late final _delete_friendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('delete_friend');
  late final _delete_friend = _delete_friendPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_friend_application_list_as_recipient(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_friend_application_list_as_recipient(
      cCallback,
      operationID,
    );
  }

  late final _get_friend_application_list_as_recipientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>(
      'get_friend_application_list_as_recipient');
  late final _get_friend_application_list_as_recipient =
      _get_friend_application_list_as_recipientPtr
          .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void get_friend_application_list_as_applicant(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_friend_application_list_as_applicant(
      cCallback,
      operationID,
    );
  }

  late final _get_friend_application_list_as_applicantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>(
      'get_friend_application_list_as_applicant');
  late final _get_friend_application_list_as_applicant =
      _get_friend_application_list_as_applicantPtr
          .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void accept_friend_application(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDHandleMsg,
  ) {
    return _accept_friend_application(
      cCallback,
      operationID,
      userIDHandleMsg,
    );
  }

  late final _accept_friend_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('accept_friend_application');
  late final _accept_friend_application =
      _accept_friend_applicationPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void refuse_friend_application(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDHandleMsg,
  ) {
    return _refuse_friend_application(
      cCallback,
      operationID,
      userIDHandleMsg,
    );
  }

  late final _refuse_friend_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('refuse_friend_application');
  late final _refuse_friend_application =
      _refuse_friend_applicationPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void add_black(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> blackUserID,
    ffi.Pointer<ffi.Char> ex,
  ) {
    return _add_black(
      cCallback,
      operationID,
      blackUserID,
      ex,
    );
  }

  late final _add_blackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('add_black');
  late final _add_black = _add_blackPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void get_black_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_black_list(
      cCallback,
      operationID,
    );
  }

  late final _get_black_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('get_black_list');
  late final _get_black_list = _get_black_listPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void remove_black(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> removeUserID,
  ) {
    return _remove_black(
      cCallback,
      operationID,
      removeUserID,
    );
  }

  late final _remove_blackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('remove_black');
  late final _remove_black = _remove_blackPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// =====================================================group===============================================
  /// CreateGroup creates a group
  void create_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupReqInfo,
  ) {
    return _create_group(
      cCallback,
      operationID,
      cGroupReqInfo,
    );
  }

  late final _create_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_group');
  late final _create_group = _create_groupPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// JoinGroup joins a group
  void join_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cReqMsg,
    int cJoinSource,
    ffi.Pointer<ffi.Char> ex,
  ) {
    return _join_group(
      cCallback,
      operationID,
      cGroupID,
      cReqMsg,
      cJoinSource,
      ex,
    );
  }

  late final _join_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('join_group');
  late final _join_group = _join_groupPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// QuitGroup quits a group
  void quit_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
  ) {
    return _quit_group(
      cCallback,
      operationID,
      cGroupID,
    );
  }

  late final _quit_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('quit_group');
  late final _quit_group = _quit_groupPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// DismissGroup dismisses a group
  void dismiss_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
  ) {
    return _dismiss_group(
      cCallback,
      operationID,
      cGroupID,
    );
  }

  late final _dismiss_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('dismiss_group');
  late final _dismiss_group = _dismiss_groupPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// ChangeGroupMute changes the mute status of a group
  void change_group_mute(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    int cIsMute,
  ) {
    return _change_group_mute(
      cCallback,
      operationID,
      cGroupID,
      cIsMute,
    );
  }

  late final _change_group_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('change_group_mute');
  late final _change_group_mute = _change_group_mutePtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// ChangeGroupMemberMute changes the mute status of a group member
  void change_group_member_mute(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cUserID,
    int cMutedSeconds,
  ) {
    return _change_group_member_mute(
      cCallback,
      operationID,
      cGroupID,
      cUserID,
      cMutedSeconds,
    );
  }

  late final _change_group_member_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('change_group_member_mute');
  late final _change_group_member_mute =
      _change_group_member_mutePtr.asFunction<
          void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// SetGroupMemberInfo sets the information of a group member
  void set_group_member_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupMemberInfo,
  ) {
    return _set_group_member_info(
      cCallback,
      operationID,
      cGroupMemberInfo,
    );
  }

  late final _set_group_member_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_group_member_info');
  late final _set_group_member_info = _set_group_member_infoPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GetJoinedGroupList retrieves the list of joined groups
  void get_joined_group_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_joined_group_list(
      cCallback,
      operationID,
    );
  }

  late final _get_joined_group_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>('get_joined_group_list');
  late final _get_joined_group_list = _get_joined_group_listPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  /// GetJoinedGroupListPage retrieves the list of joined groups with pagination
  void get_joined_group_list_page(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int offset,
    int count,
  ) {
    return _get_joined_group_list_page(
      cCallback,
      operationID,
      offset,
      count,
    );
  }

  late final _get_joined_group_list_pagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('get_joined_group_list_page');
  late final _get_joined_group_list_page = _get_joined_group_list_pagePtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int, int)>();

  /// GetSpecifiedGroupsInfo retrieves the information of specified groups
  void get_specified_groups_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupIDList,
  ) {
    return _get_specified_groups_info(
      cCallback,
      operationID,
      cGroupIDList,
    );
  }

  late final _get_specified_groups_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_specified_groups_info');
  late final _get_specified_groups_info =
      _get_specified_groups_infoPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// SearchGroups searches for groups
  void search_groups(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cSearchParam,
  ) {
    return _search_groups(
      cCallback,
      operationID,
      cSearchParam,
    );
  }

  late final _search_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('search_groups');
  late final _search_groups = _search_groupsPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// SetGroupInfo sets the information of a group
  void set_group_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupInfo,
  ) {
    return _set_group_info(
      cCallback,
      operationID,
      cGroupInfo,
    );
  }

  late final _set_group_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_group_info');
  late final _set_group_info = _set_group_infoPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GetGroupMemberList retrieves the list of group members
  void get_group_member_list(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    int cFilter,
    int cOffset,
    int cCount,
  ) {
    return _get_group_member_list(
      cCallback,
      operationID,
      cGroupID,
      cFilter,
      cOffset,
      cCount,
    );
  }

  late final _get_group_member_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('get_group_member_list');
  late final _get_group_member_list = _get_group_member_listPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          int, int, int)>();

  /// GetGroupMemberOwnerAndAdmin retrieves the owner and admin members of a group
  void get_group_member_owner_and_admin(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
  ) {
    return _get_group_member_owner_and_admin(
      cCallback,
      operationID,
      cGroupID,
    );
  }

  late final _get_group_member_owner_and_adminPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_group_member_owner_and_admin');
  late final _get_group_member_owner_and_admin =
      _get_group_member_owner_and_adminPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GetGroupMemberListByJoinTimeFilter retrieves the list of group members filtered by join time
  void get_group_member_list_by_join_time_filter(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    int cOffset,
    int cCount,
    int cJoinTimeBegin,
    int cJoinTimeEnd,
    ffi.Pointer<ffi.Char> cFilterUserIDList,
  ) {
    return _get_group_member_list_by_join_time_filter(
      cCallback,
      operationID,
      cGroupID,
      cOffset,
      cCount,
      cJoinTimeBegin,
      cJoinTimeEnd,
      cFilterUserIDList,
    );
  }

  late final _get_group_member_list_by_join_time_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CB_S_I_S_S,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Int,
                  ffi.LongLong,
                  ffi.LongLong,
                  ffi.Pointer<ffi.Char>)>>(
      'get_group_member_list_by_join_time_filter');
  late final _get_group_member_list_by_join_time_filter =
      _get_group_member_list_by_join_time_filterPtr.asFunction<
          void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>)>();

  /// GetSpecifiedGroupMembersInfo retrieves the information of specified group members
  void get_specified_group_members_info(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cUserIDList,
  ) {
    return _get_specified_group_members_info(
      cCallback,
      operationID,
      cGroupID,
      cUserIDList,
    );
  }

  late final _get_specified_group_members_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_specified_group_members_info');
  late final _get_specified_group_members_info =
      _get_specified_group_members_infoPtr.asFunction<
          void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// KickGroupMember kicks group members
  void kick_group_member(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cReason,
    ffi.Pointer<ffi.Char> cUserIDList,
  ) {
    return _kick_group_member(
      cCallback,
      operationID,
      cGroupID,
      cReason,
      cUserIDList,
    );
  }

  late final _kick_group_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('kick_group_member');
  late final _kick_group_member = _kick_group_memberPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// TransferGroupOwner transfers the ownership of a group
  void transfer_group_owner(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cNewOwnerUserID,
  ) {
    return _transfer_group_owner(
      cCallback,
      operationID,
      cGroupID,
      cNewOwnerUserID,
    );
  }

  late final _transfer_group_ownerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('transfer_group_owner');
  late final _transfer_group_owner = _transfer_group_ownerPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// InviteUserToGroup invites users to a group
  void invite_user_to_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cReason,
    ffi.Pointer<ffi.Char> cUserIDList,
  ) {
    return _invite_user_to_group(
      cCallback,
      operationID,
      cGroupID,
      cReason,
      cUserIDList,
    );
  }

  late final _invite_user_to_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('invite_user_to_group');
  late final _invite_user_to_group = _invite_user_to_groupPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GetGroupApplicationListAsRecipient retrieves the group application list as a recipient
  void get_group_application_list_as_recipient(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_group_application_list_as_recipient(
      cCallback,
      operationID,
    );
  }

  late final _get_group_application_list_as_recipientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>(
      'get_group_application_list_as_recipient');
  late final _get_group_application_list_as_recipient =
      _get_group_application_list_as_recipientPtr
          .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  /// GetGroupApplicationListAsApplicant retrieves the group application list as an applicant
  void get_group_application_list_as_applicant(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_group_application_list_as_applicant(
      cCallback,
      operationID,
    );
  }

  late final _get_group_application_list_as_applicantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>>(
      'get_group_application_list_as_applicant');
  late final _get_group_application_list_as_applicant =
      _get_group_application_list_as_applicantPtr
          .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  /// AcceptGroupApplication accepts a group application
  void accept_group_application(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cFromUserID,
    ffi.Pointer<ffi.Char> cHandleMsg,
  ) {
    return _accept_group_application(
      cCallback,
      operationID,
      cGroupID,
      cFromUserID,
      cHandleMsg,
    );
  }

  late final _accept_group_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('accept_group_application');
  late final _accept_group_application =
      _accept_group_applicationPtr.asFunction<
          void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// RefuseGroupApplication refuses a group application
  void refuse_group_application(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> cFromUserID,
    ffi.Pointer<ffi.Char> cHandleMsg,
  ) {
    return _refuse_group_application(
      cCallback,
      operationID,
      cGroupID,
      cFromUserID,
      cHandleMsg,
    );
  }

  late final _refuse_group_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('refuse_group_application');
  late final _refuse_group_application =
      _refuse_group_applicationPtr.asFunction<
          void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// SearchGroupMembers searches for group members
  void search_group_members(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cSearchParam,
  ) {
    return _search_group_members(
      cCallback,
      operationID,
      cSearchParam,
    );
  }

  late final _search_group_membersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('search_group_members');
  late final _search_group_members = _search_group_membersPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// IsJoinGroup checks if the user has joined a group
  void is_join_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
  ) {
    return _is_join_group(
      cCallback,
      operationID,
      cGroupID,
    );
  }

  late final _is_join_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('is_join_group');
  late final _is_join_group = _is_join_groupPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GetUsersInGroup retrieves the users in a group
  void get_users_in_group(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> cGroupID,
    ffi.Pointer<ffi.Char> userIDList,
  ) {
    return _get_users_in_group(
      cCallback,
      operationID,
      cGroupID,
      userIDList,
    );
  }

  late final _get_users_in_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_users_in_group');
  late final _get_users_in_group = _get_users_in_groupPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void subscribe_users_status(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDs,
  ) {
    return _subscribe_users_status(
      cCallback,
      operationID,
      userIDs,
    );
  }

  late final _subscribe_users_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('subscribe_users_status');
  late final _subscribe_users_status = _subscribe_users_statusPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void unsubscribe_users_status(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDs,
  ) {
    return _unsubscribe_users_status(
      cCallback,
      operationID,
      userIDs,
    );
  }

  late final _unsubscribe_users_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('unsubscribe_users_status');
  late final _unsubscribe_users_status =
      _unsubscribe_users_statusPtr.asFunction<
          void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void get_subscribe_users_status(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _get_subscribe_users_status(
      cCallback,
      operationID,
    );
  }

  late final _get_subscribe_users_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S,
              ffi.Pointer<ffi.Char>)>>('get_subscribe_users_status');
  late final _get_subscribe_users_status = _get_subscribe_users_statusPtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>)>();

  void get_user_status(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDs,
  ) {
    return _get_user_status(
      cCallback,
      operationID,
      userIDs,
    );
  }

  late final _get_user_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('get_user_status');
  late final _get_user_status = _get_user_statusPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void update_fcm_token(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> fcmToken,
    int expireTime,
  ) {
    return _update_fcm_token(
      cCallback,
      operationID,
      fcmToken,
      expireTime,
    );
  }

  late final _update_fcm_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.LongLong)>>('update_fcm_token');
  late final _update_fcm_token = _update_fcm_tokenPtr.asFunction<
      void Function(
          CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void set_app_Badge(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int appUnreadCount,
  ) {
    return _set_app_Badge(
      cCallback,
      operationID,
      appUnreadCount,
    );
  }

  late final _set_app_BadgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int)>>('set_app_Badge');
  late final _set_app_Badge = _set_app_BadgePtr
      .asFunction<void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int)>();

  void upload_logs(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int line,
    ffi.Pointer<ffi.Char> ex,
    CB_I_S uploadLogProgressCallback,
  ) {
    return _upload_logs(
      cCallback,
      operationID,
      line,
      ex,
      uploadLogProgressCallback,
    );
  }

  late final _upload_logsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, CB_I_S)>>('upload_logs');
  late final _upload_logs = _upload_logsPtr.asFunction<
      void Function(CB_S_I_S_S, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, CB_I_S)>();

  void logs(
    CB_S_I_S_S cCallback,
    ffi.Pointer<ffi.Char> operationID,
    int logLevel,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> msgs,
    ffi.Pointer<ffi.Char> err,
    ffi.Pointer<ffi.Char> keyAndValue,
  ) {
    return _logs(
      cCallback,
      operationID,
      logLevel,
      file,
      line,
      msgs,
      err,
      keyAndValue,
    );
  }

  late final _logsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CB_S_I_S_S,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('logs');
  late final _logs = _logsPtr.asFunction<
      void Function(
          CB_S_I_S_S,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_min(
    int arg0,
  ) {
    return _sched_get_priority_min(
      arg0,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_get_priority_max(
    int arg0,
  ) {
    return _sched_get_priority_max(
      arg0,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  /// [TSF] Thread safe functions
  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id.value,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  Dart__uint64_t clock_gettime_nsec_np(
    clockid_t __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id.value,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.UnsignedInt)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  /// !
  /// @function qos_class_self
  ///
  /// @abstract
  /// Returns the requested QOS class of the current thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_self() {
    return _qos_class_self();
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  /// !
  /// @function qos_class_main
  ///
  /// @abstract
  /// Returns the initial requested QOS class of the main thread.
  ///
  /// @discussion
  /// The QOS class that the main thread of a process is created with depends on
  /// the type of process (e.g. application or daemon) and on how it has been
  /// launched.
  ///
  /// This function returns that initial requested QOS class value chosen by the
  /// system to enable propagation of that classification to matching work not
  /// executing on the main thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_main() {
    return _qos_class_main();
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_attr_set_qos_class_np
  ///
  /// @abstract
  /// Sets the QOS class and relative priority of a pthread attribute structure
  /// which may be used to specify the requested QOS class of newly created
  /// threads.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_attr_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_attr_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED.
  ///
  /// @param __attr
  /// The pthread attribute structure to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_set_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_attr_set_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_set_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, qos_class_t,
              ffi.Int)>>('pthread_attr_set_qos_class_np');
  late final _pthread_attr_set_qos_class_np = _pthread_attr_set_qos_class_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int, int)>();

  /// !
  /// @function pthread_attr_get_qos_class_np
  ///
  /// @abstract
  /// Gets the QOS class and relative priority of a pthread attribute structure.
  ///
  /// @param __attr
  /// The pthread attribute structure to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_get_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_attr_get_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_get_qos_class_np');
  late final _pthread_attr_get_qos_class_np =
      _pthread_attr_get_qos_class_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_set_qos_class_self_np
  ///
  /// @abstract
  /// Sets the requested QOS class and relative priority of the current thread.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED thereafter. A thread so modified is permanently
  /// opted-out of the QOS class system and calls to this function to request a QOS
  /// class for such a thread will fail and return EPERM.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_set_qos_class_self_np(
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_set_qos_class_self_np(
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_set_qos_class_self_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(qos_class_t, ffi.Int)>>(
          'pthread_set_qos_class_self_np');
  late final _pthread_set_qos_class_self_np =
      _pthread_set_qos_class_self_npPtr.asFunction<int Function(int, int)>();

  /// !
  /// @function pthread_get_qos_class_np
  ///
  /// @abstract
  /// Gets the requested QOS class and relative priority of a thread.
  ///
  /// @param __pthread
  /// The target thread to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_get_qos_class_np(
    pthread_t __pthread,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_get_qos_class_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_get_qos_class_np');
  late final _pthread_get_qos_class_np =
      _pthread_get_qos_class_npPtr.asFunction<
          int Function(
              pthread_t, ffi.Pointer<qos_class_t>, ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_override_qos_class_start_np
  ///
  /// @abstract
  /// Starts a QOS class override of the specified target thread.
  ///
  /// @discussion
  /// Starting a QOS class override of the specified target thread expresses that
  /// an item of pending work classified with the specified QOS class and relative
  /// priority depends on the completion of the work currently being executed by
  /// the thread (e.g. due to ordering requirements).
  ///
  /// While overrides are in effect, the specified target thread will execute at
  /// the maximum QOS class and relative priority of all overrides and of the QOS
  /// class requested by the thread itself.
  ///
  /// Starting a QOS class override does not modify the target thread's requested
  /// QOS class value and the effect of an override is not visible to the
  /// qos_class_self() and pthread_get_qos_class_np() interfaces.
  ///
  /// The returned newly allocated override object is intended to be associated
  /// with the item of pending work in question. Once the dependency has been
  /// satisfied and enabled that work to begin executing, the QOS class override
  /// must be ended by passing the associated override object to
  /// pthread_override_qos_class_end_np(). Failure to do so will result in the
  /// associated resources to be leaked and the target thread to be permanently
  /// executed at an inappropriately elevated QOS class.
  ///
  /// @param __pthread
  /// The target thread to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// NULL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// NULL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// A newly allocated override object if successful, or NULL if the override
  /// could not be started.
  pthread_override_t pthread_override_qos_class_start_np(
    pthread_t __pthread,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_override_qos_class_start_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_override_qos_class_start_npPtr = _lookup<
      ffi.NativeFunction<
          pthread_override_t Function(pthread_t, qos_class_t,
              ffi.Int)>>('pthread_override_qos_class_start_np');
  late final _pthread_override_qos_class_start_np =
      _pthread_override_qos_class_start_npPtr
          .asFunction<pthread_override_t Function(pthread_t, int, int)>();

  /// !
  /// @function pthread_override_qos_class_end_np
  ///
  /// @abstract
  /// Ends a QOS class override.
  ///
  /// @discussion
  /// Passing an override object returned by pthread_override_qos_class_start_np()
  /// ends the QOS class override started by that call and deallocates all
  /// associated resources as well as the override object itself.
  ///
  /// The thread starting and the thread ending a QOS class override need not be
  /// identical. If the thread ending the override is the the target thread of the
  /// override itself, it should take care to elevate its requested QOS class
  /// appropriately with pthread_set_qos_class_self_np() before ending the
  /// override.
  ///
  /// @param __override
  /// An override object returned by pthread_override_qos_class_start_np().
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_override_qos_class_end_np(
    pthread_override_t __override,
  ) {
    return _pthread_override_qos_class_end_np(
      __override,
    );
  }

  late final _pthread_override_qos_class_end_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_override_t)>>(
          'pthread_override_qos_class_end_np');
  late final _pthread_override_qos_class_end_np =
      _pthread_override_qos_class_end_npPtr
          .asFunction<int Function(pthread_override_t)>();

  /// Prototypes for all PTHREAD interfaces
  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg2,
  ) {
    return _pthread_atfork(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_destroy(
      arg0,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_getschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _pthread_attr_getstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_attr_getstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_init(
      arg0,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_setschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _pthread_attr_setstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_attr_setstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_cancel(
    pthread_t arg0,
  ) {
    return _pthread_cancel(
      arg0,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(pthread_t)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_broadcast(
      arg0,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_destroy(
      arg0,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_condattr_t> arg1,
  ) {
    return _pthread_cond_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_signal(
      arg0,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
  ) {
    return _pthread_cond_wait(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_destroy(
      arg0,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_init(
      arg0,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_condattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    int arg1,
  ) {
    return _pthread_condattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_create(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int pthread_detach(
    pthread_t arg0,
  ) {
    return _pthread_detach(
      arg0,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(pthread_t)>();

  int pthread_equal(
    pthread_t arg0,
    pthread_t arg1,
  ) {
    return _pthread_equal(
      arg0,
      arg1,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(pthread_t, pthread_t)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _pthread_exit(
      arg0,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_getconcurrency() {
    return _pthread_getconcurrency();
  }

  late final _pthread_getconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_getconcurrency');
  late final _pthread_getconcurrency =
      _pthread_getconcurrencyPtr.asFunction<int Function()>();

  int pthread_getschedparam(
    pthread_t arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_getschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(
          pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int arg0,
  ) {
    return _pthread_getspecific(
      arg0,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_join(
    pthread_t arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_join(
      arg0,
      arg1,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr.asFunction<
      int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
  ) {
    return _pthread_key_create(
      arg0,
      arg1,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int arg0,
  ) {
    return _pthread_key_delete(
      arg0,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_destroy(
      arg0,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutex_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<pthread_mutexattr_t> arg1,
  ) {
    return _pthread_mutex_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_lock(
      arg0,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _pthread_mutex_setprioceiling(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_trylock(
      arg0,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_unlock(
      arg0,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_destroy(
      arg0,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_gettype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpolicy_np');
  late final _pthread_mutexattr_getpolicy_np =
      _pthread_mutexattr_getpolicy_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_init(
      arg0,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_settype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpolicy_np');
  late final _pthread_mutexattr_setpolicy_np =
      _pthread_mutexattr_setpolicy_npPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
  ) {
    return _pthread_once(
      arg0,
      arg1,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_destroy(
      arg0,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> arg0,
    ffi.Pointer<pthread_rwlockattr_t> arg1,
  ) {
    return _pthread_rwlock_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_rdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_tryrdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_trywrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_wrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_unlock(
      arg0,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_destroy(
      arg0,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_rwlockattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_init(
      arg0,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    int arg1,
  ) {
    return _pthread_rwlockattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  pthread_t pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self =
      _pthread_selfPtr.asFunction<pthread_t Function()>();

  int pthread_setcancelstate(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcancelstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcanceltype(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setconcurrency(
    int arg0,
  ) {
    return _pthread_setconcurrency(
      arg0,
    );
  }

  late final _pthread_setconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pthread_setconcurrency');
  late final _pthread_setconcurrency =
      _pthread_setconcurrencyPtr.asFunction<int Function(int)>();

  int pthread_setschedparam(
    pthread_t arg0,
    int arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_setschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(pthread_t, int, ffi.Pointer<sched_param>)>();

  int pthread_setspecific(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_setspecific(
      arg0,
      arg1,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  /// returns non-zero if pthread_create or cthread_fork have been called
  int pthread_is_threaded_np() {
    return _pthread_is_threaded_np();
  }

  late final _pthread_is_threaded_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_is_threaded_np');
  late final _pthread_is_threaded_np =
      _pthread_is_threaded_npPtr.asFunction<int Function()>();

  int pthread_threadid_np(
    pthread_t arg0,
    ffi.Pointer<__uint64_t> arg1,
  ) {
    return _pthread_threadid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_threadid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__uint64_t>)>>('pthread_threadid_np');
  late final _pthread_threadid_np = _pthread_threadid_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<__uint64_t>)>();

  /// SPI to set and get pthread name
  int pthread_getname_np(
    pthread_t arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _pthread_getname_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getname_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('pthread_getname_np');
  late final _pthread_getname_np = _pthread_getname_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<ffi.Char>, int)>();

  int pthread_setname_np(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pthread_setname_np(
      arg0,
    );
  }

  late final _pthread_setname_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pthread_setname_np');
  late final _pthread_setname_np =
      _pthread_setname_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// returns non-zero if the current thread is the main thread
  int pthread_main_np() {
    return _pthread_main_np();
  }

  late final _pthread_main_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_main_np');
  late final _pthread_main_np =
      _pthread_main_npPtr.asFunction<int Function()>();

  /// return the mach thread bound to the pthread
  int pthread_mach_thread_np(
    pthread_t arg0,
  ) {
    return _pthread_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(pthread_t)>>(
          'pthread_mach_thread_np');
  late final _pthread_mach_thread_np =
      _pthread_mach_thread_npPtr.asFunction<int Function(pthread_t)>();

  int pthread_get_stacksize_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stacksize_np(
      arg0,
    );
  }

  late final _pthread_get_stacksize_npPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(pthread_t)>>(
          'pthread_get_stacksize_np');
  late final _pthread_get_stacksize_np =
      _pthread_get_stacksize_npPtr.asFunction<int Function(pthread_t)>();

  ffi.Pointer<ffi.Void> pthread_get_stackaddr_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stackaddr_np(
      arg0,
    );
  }

  late final _pthread_get_stackaddr_npPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>>(
          'pthread_get_stackaddr_np');
  late final _pthread_get_stackaddr_np = _pthread_get_stackaddr_npPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>();

  /// Like pthread_cond_signal(), but only wake up the specified pthread
  int pthread_cond_signal_thread_np(
    ffi.Pointer<pthread_cond_t> arg0,
    pthread_t arg1,
  ) {
    return _pthread_cond_signal_thread_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_signal_thread_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              pthread_t)>>('pthread_cond_signal_thread_np');
  late final _pthread_cond_signal_thread_np = _pthread_cond_signal_thread_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>, pthread_t)>();

  /// Like pthread_cond_timedwait, but use a relative timeout
  int pthread_cond_timedwait_relative_np(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait_relative_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwait_relative_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait_relative_np');
  late final _pthread_cond_timedwait_relative_np =
      _pthread_cond_timedwait_relative_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_create_suspended_np(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create_suspended_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_create_suspended_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create_suspended_np');
  late final _pthread_create_suspended_np =
      _pthread_create_suspended_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  pthread_t pthread_from_mach_thread_np(
    int arg0,
  ) {
    return _pthread_from_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_from_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<pthread_t Function(mach_port_t)>>(
          'pthread_from_mach_thread_np');
  late final _pthread_from_mach_thread_np =
      _pthread_from_mach_thread_npPtr.asFunction<pthread_t Function(int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  void pthread_yield_np() {
    return _pthread_yield_np();
  }

  late final _pthread_yield_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_yield_np');
  late final _pthread_yield_np =
      _pthread_yield_npPtr.asFunction<void Function()>();

  void pthread_jit_write_protect_np(
    int enabled,
  ) {
    return _pthread_jit_write_protect_np(
      enabled,
    );
  }

  late final _pthread_jit_write_protect_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'pthread_jit_write_protect_np');
  late final _pthread_jit_write_protect_np =
      _pthread_jit_write_protect_npPtr.asFunction<void Function(int)>();

  int pthread_jit_write_protect_supported_np() {
    return _pthread_jit_write_protect_supported_np();
  }

  late final _pthread_jit_write_protect_supported_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'pthread_jit_write_protect_supported_np');
  late final _pthread_jit_write_protect_supported_np =
      _pthread_jit_write_protect_supported_npPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_jit_write_with_callback_np
  ///
  /// @abstract
  /// Toggles per-thread write-protection of the MAP_JIT region to writeable,
  /// invokes an allowed callback function to write to it, and toggles protection
  /// back to executable.
  ///
  /// @param callback
  /// The callback function to invoke to write to the MAP_JIT region.  It must be
  /// statically allowed using {@link PTHREAD_JIT_WRITE_ALLOW_CALLBACKS_NP}.
  ///
  /// @param ctx
  /// Context to pass through to the invocation of the callback function.
  ///
  /// @result
  /// The result code returned by the callback function.
  ///
  /// @discussion
  /// This function assumes that the MAP_JIT region has executable protection when
  /// called.  It is therefore invalid to call it recursively from within a write
  /// callback.  The implementation does not detect such invalid recursive calls,
  /// so the client is responsible for preventing them.
  ///
  /// Callbacks _must not_ perform any non-local transfer of control flow (e.g.
  /// throw an exception, longjmp(3)), as doing so would leave the MAP_JIT region
  /// writeable.
  ///
  /// On systems where pthread_jit_write_protect_supported_np(3) is false, this
  /// function calls @callback directly and does nothing else.
  ///
  /// This function only enforces that @callback is allowed if the caller has the
  /// com.apple.security.cs.jit-write-allowlist entitlement.  That entitlement also
  /// disallows use of pthread_jit_write_protect_np(3).  Adopting the entitlement
  /// is therefore crucial in realizing the security benefits of this interface.
  ///
  /// If the entitlement is not present then this function toggles protection of
  /// the MAP_JIT to writeable, calls @callback and then toggles protection back to
  /// executable, without validating that @callback is an allowed function.  This
  /// behavior is intended to permit independent adoption of this interface by
  /// libraries - once all libraries in an application have adopted, the
  /// application should add the entitlement.
  ///
  /// By default, only callbacks in libraries/images present at process start-up
  /// are allowed - callbacks in images loaded dynamically via dlopen(3)/etc. are
  /// not permitted.  However, if the additional entitlement
  /// com.apple.security.cs.jit-write-allowlist-freeze-late is _also_ present, any
  /// callbacks in dlopen'd libraries are also added to the set of allowed
  /// callbacks until the {@link pthread_jit_write_freeze_callbacks_np} function is
  /// called.
  ///
  /// The goal of this interface is to allow applications that execute JIT-compiled
  /// code to mitigate against attempts from attackers to escalate to code
  /// execution by getting their own instructions written to the MAP_JIT region.
  ///
  /// Callbacks should assume an attacker can control the input to this function.
  /// They must therefore carefully validate the data that they are passed and do
  /// so using as little attackable state as possible. This means simplifying
  /// control flow and avoiding spills of sensitive registers (e.g. those used for
  /// validation or control flow).
  ///
  /// In the event a callback detects that its input is invalid, it should either
  /// abort in the simplest fashion possible (preferring e.g. __builtin_trap() over
  /// abort(3), the latter being encumbered by various conformance requirements) or
  /// return a result indicating failure.
  int pthread_jit_write_with_callback_np(
    pthread_jit_write_callback_t callback,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _pthread_jit_write_with_callback_np(
      callback,
      ctx,
    );
  }

  late final _pthread_jit_write_with_callback_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_jit_write_callback_t,
              ffi.Pointer<ffi.Void>)>>('pthread_jit_write_with_callback_np');
  late final _pthread_jit_write_with_callback_np =
      _pthread_jit_write_with_callback_npPtr.asFunction<
          int Function(pthread_jit_write_callback_t, ffi.Pointer<ffi.Void>)>();

  /// !
  /// @function pthread_jit_write_freeze_callbacks_np
  ///
  /// @abstract
  /// Freezes the set of allowed pthread JIT write callbacks, preventing any
  /// callbacks in subsequently dlopen'd libraries from being allowed as arguments
  /// to {@link pthread_jit_write_with_callback_np}
  ///
  /// @discussion
  /// If the com.apple.security.cs.jit-write-allowlist-freeze-late entitlement is
  /// present, this function must be called exactly once after all libraries
  /// containing JIT write callbacks have been loaded to prevent any further
  /// runtime modifications to the set of allowed callbacks.  Failing to call this
  /// function before calling pthread_jit_write_with_callback_np(3) for the first
  /// time is an error, as is calling it multiple times.
  ///
  /// If the jit-write-allowlist-freeze-late entitlement is not present, calling
  /// this function is an error.
  ///
  /// If an application does not need to dlopen(3) any libraries or frameworks
  /// containing needed JIT write callbacks, it is best to avoid the
  /// jit-write-allowlist-freeze-late entitlement and accompanying need to call
  /// this function, as this allows the runtime to automatically freeze the set of
  /// allowed callbacks early in process initialization.
  void pthread_jit_write_freeze_callbacks_np() {
    return _pthread_jit_write_freeze_callbacks_np();
  }

  late final _pthread_jit_write_freeze_callbacks_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'pthread_jit_write_freeze_callbacks_np');
  late final _pthread_jit_write_freeze_callbacks_np =
      _pthread_jit_write_freeze_callbacks_npPtr.asFunction<void Function()>();

  /// !
  /// @function pthread_cpu_number_np
  ///
  /// @param cpu_number_out
  /// The CPU number that the thread was running on at the time of query.
  /// This cpu number is in the interval [0, ncpus) (from sysctlbyname("hw.ncpu"))
  ///
  /// @result
  /// This function returns 0 or the value of errno if an error occurred.
  ///
  /// @note
  /// Optimizations of per-CPU datastructures based on the result of this function
  /// still require synchronization since it is not guaranteed that the thread will
  /// still be on the same CPU by the time the function returns.
  int pthread_cpu_number_np(
    ffi.Pointer<ffi.Size> cpu_number_out,
  ) {
    return _pthread_cpu_number_np(
      cpu_number_out,
    );
  }

  late final _pthread_cpu_number_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Size>)>>(
          'pthread_cpu_number_np');
  late final _pthread_cpu_number_np = _pthread_cpu_number_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Size>)>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;

/// stdio buffers
final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

/// hold a buncha junk that would grow the ABI
final class __sFILEX extends ffi.Opaque {}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
final class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.UnsignedChar> _p;

  /// read space left for getc()
  @ffi.Int()
  external int _r;

  /// write space left for putc()
  @ffi.Int()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Short()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Short()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int()
  external int _ur;

  /// guarantee an ungetc() buffer
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  /// guarantee a getc() buffer
  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef CB_S = ffi.Pointer<ffi.NativeFunction<CB_SFunction>>;
typedef CB_SFunction = ffi.Void Function(ffi.Pointer<ffi.Char>);
typedef DartCB_SFunction = void Function(ffi.Pointer<ffi.Char>);
typedef CB_I_S = ffi.Pointer<ffi.NativeFunction<CB_I_SFunction>>;
typedef CB_I_SFunction = ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>);
typedef DartCB_I_SFunction = void Function(int, ffi.Pointer<ffi.Char>);
typedef CB_S_I_S_S = ffi.Pointer<ffi.NativeFunction<CB_S_I_S_SFunction>>;
typedef CB_S_I_S_SFunction = ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>);
typedef DartCB_S_I_S_SFunction = void Function(
    ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>);
typedef CB_S_I_S_S_I = ffi.Pointer<ffi.NativeFunction<CB_S_I_S_S_IFunction>>;
typedef CB_S_I_S_S_IFunction = ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int);
typedef DartCB_S_I_S_S_IFunction = void Function(ffi.Pointer<ffi.Char>, int,
    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int);

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef DartGoInt64 = int;
typedef GoUint8 = ffi.UnsignedChar;
typedef DartGoUint8 = int;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __opaque;
}

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;

final class tm extends ffi.Struct {
  /// seconds after the minute [0-60]
  @ffi.Int()
  external int tm_sec;

  /// minutes after the hour [0-59]
  @ffi.Int()
  external int tm_min;

  /// hours since midnight [0-23]
  @ffi.Int()
  external int tm_hour;

  /// day of the month [1-31]
  @ffi.Int()
  external int tm_mday;

  /// months since January [0-11]
  @ffi.Int()
  external int tm_mon;

  /// years since 1900
  @ffi.Int()
  external int tm_year;

  /// days since Sunday [0-6]
  @ffi.Int()
  external int tm_wday;

  /// days since January 1 [0-365]
  @ffi.Int()
  external int tm_yday;

  /// Daylight Savings Time flag
  @ffi.Int()
  external int tm_isdst;

  /// offset from UTC in seconds
  @ffi.Long()
  external int tm_gmtoff;

  /// timezone abbreviation
  external ffi.Pointer<ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef time_t = __darwin_time_t;

enum clockid_t {
  _CLOCK_REALTIME(0),
  _CLOCK_MONOTONIC(6),
  _CLOCK_MONOTONIC_RAW(4),
  _CLOCK_MONOTONIC_RAW_APPROX(5),
  _CLOCK_UPTIME_RAW(8),
  _CLOCK_UPTIME_RAW_APPROX(9),
  _CLOCK_PROCESS_CPUTIME_ID(12),
  _CLOCK_THREAD_CPUTIME_ID(16);

  final int value;
  const clockid_t(this.value);

  static clockid_t fromValue(int value) => switch (value) {
        0 => _CLOCK_REALTIME,
        6 => _CLOCK_MONOTONIC,
        4 => _CLOCK_MONOTONIC_RAW,
        5 => _CLOCK_MONOTONIC_RAW_APPROX,
        8 => _CLOCK_UPTIME_RAW,
        9 => _CLOCK_UPTIME_RAW_APPROX,
        12 => _CLOCK_PROCESS_CPUTIME_ID,
        16 => _CLOCK_THREAD_CPUTIME_ID,
        _ => throw ArgumentError("Unknown value for clockid_t: $value"),
      };
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef qos_class_t = ffi.UnsignedInt;
typedef Dartqos_class_t = int;
typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef pthread_t = __darwin_pthread_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;

final class pthread_override_s extends ffi.Opaque {}

/// !
/// @typedef pthread_override_t
///
/// @abstract
/// An opaque object representing a QOS class override of a thread.
///
/// @discussion
/// A QOS class override of a target thread expresses that an item of pending
/// work classified with a specific QOS class and relative priority depends on
/// the completion of the work currently being executed by the thread (e.g. due
/// to ordering requirements).
///
/// While overrides are in effect, the target thread will execute at the maximum
/// QOS class and relative priority of all overrides and of the QOS class
/// requested by the thread itself.
///
/// A QOS class override does not modify the target thread's requested QOS class
/// value and the effect of an override is not visible to the qos_class_self()
/// and pthread_get_qos_class_np() interfaces.
typedef pthread_override_t = ffi.Pointer<pthread_override_s>;
typedef pthread_cond_t = __darwin_pthread_cond_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef pthread_condattr_t = __darwin_pthread_condattr_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef pthread_mutex_t = __darwin_pthread_mutex_t;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef pthread_key_t = __darwin_pthread_key_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef pthread_once_t = __darwin_pthread_once_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef pthread_rwlock_t = __darwin_pthread_rwlock_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef sigset_t = __darwin_sigset_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

/// !
/// @typedef pthread_jit_write_callback_t
/// The type of a function that can be supplied to {@link
/// pthread_jit_write_with_callback_np} to write to the MAP_JIT region while it
/// is writeable.
///
/// @param ctx
/// A pointer to context that will be passed through to the callback function.
///
/// @result
/// A result code to be returned to the caller of @{link
/// pthread_jit_write_with_callback_np}.  The system does not interpret/act on
/// the value of this result.
typedef pthread_jit_write_callback_t
    = ffi.Pointer<ffi.NativeFunction<pthread_jit_write_callback_tFunction>>;
typedef pthread_jit_write_callback_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx);
typedef Dartpthread_jit_write_callback_tFunction = int Function(
    ffi.Pointer<ffi.Void> ctx);

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __VISIONOS_1_0 = 10000;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 140000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 140200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int _PTHREAD_MUTEX_SIG_init = 850045863;

const int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 850045857;

const int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 850045858;

const int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 850045859;

const int _PTHREAD_COND_SIG_init = 1018212795;

const int _PTHREAD_ONCE_SIG_init = 816954554;

const int _PTHREAD_RWLOCK_SIG_init = 766030772;

const int SCHED_OTHER = 1;

const int SCHED_FIFO = 4;

const int SCHED_RR = 2;

const int __SCHED_PARAM_SIZE__ = 4;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int PTHREAD_CREATE_JOINABLE = 1;

const int PTHREAD_CREATE_DETACHED = 2;

const int PTHREAD_INHERIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED = 2;

const int PTHREAD_CANCEL_ENABLE = 1;

const int PTHREAD_CANCEL_DISABLE = 0;

const int PTHREAD_CANCEL_DEFERRED = 2;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 0;

const int PTHREAD_SCOPE_SYSTEM = 1;

const int PTHREAD_SCOPE_PROCESS = 2;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_PRIVATE = 2;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 1;

const int PTHREAD_MUTEX_RECURSIVE = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;

const int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;
